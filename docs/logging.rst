
*************
Event logging
*************

Like Solidity and other EVM languages, Vyper can log events to be caught and displayed by user interfaces.

Example of Logging
==================

This example is taken from the sample ERC20 contract and shows the basic flow of event logging.

::

    # Events of the token.
    Transfer: __log__({_from: indexed(address), _to: indexed(address), _value: num256})
    Approval: __log__({_owner: indexed(address), _spender: indexed(address), _value: num256})

    # Transfer some tokens from message sender to another address
    def transfer(_to: address, _amount: num(num256)) -> bool:

       ... Logic here to do the real work ...

       # All done, log the event for listeners
       log.Transfer(msg.sender, _to, convert(_amount, 'num256'))

Let's look at what this is doing. First, we declare two event types to log. The two events are similar in that they contain 
two indexed address fields. Indexed fields do not make up part of the event data itself, but can be searched by clients that
want to catch the event. Also, each event contains one single data field, in each case called _value. Events can contain several arguments with any names desired.

Next, in the ``transfer`` function, after we do whatever work is necessary, we log the event. We pass three arguments, corresponding with the three arguments of the Transfer event declaration.

Clients listening to the events will declare the events they are interested in using a library such as web3.js:

::

    var abi = /* abi as generated by the compiler */;
    var MyToken = web3.eth.contract(abi);
    var myToken = MyToken.at("0x1234...ab67" /* address */);

    // watch for changes in the callback
    var event = myToken.Transfer(function(error, result) {
        if (!error) {
            var args = result.args;
            console.log('value transferred = ', args._amount);
        }
    });

In this example, the listening client declares the event to listen for. Any time the contract sends a log event, the callback will be invoked. The `result` arg passes a large amount of information, but here we're most interested in `result.args`. This is an object with properties that match the properties declared in the event. Note that this object does not contain the indexed properties, which can only be searched in the original `myToken.Transfer` that created the callback. (See https://github.com/ethereum/wiki/wiki/JavaScript-API#contract-events for more information.)

Declaring Events
================
