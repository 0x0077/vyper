#!/usr/bin/env python3
import argparse
import json
import sys
import vyper

from vyper import compiler, optimizer
from vyper.parser.parser import parse_to_lll
from vyper.parser import parser_utils
from vyper import compile_lll

sys.tracebacklimit = 0

parser = argparse.ArgumentParser(description='Vyper {0} programming language for Ethereum'.format(vyper.__version__))
parser.add_argument('input_file', help='Vyper sourcecode to compile')
parser.add_argument('-f', help='Format to print', choices=['abi', 'json', 'bytecode', 'bytecode_runtime', 'ir', 'asm'], default=['bytecode'], dest='format', nargs='+')
parser.add_argument('--show-gas-estimates', help='Show gas estimates in ir output mode.', action="store_true")

args = parser.parse_args()


def get_asm(asm_list):
    output_string = ''
    skip_newlines = 0
    for node in asm_list:
        if isinstance(node, list):
            output_string += get_asm(node)
            continue

        is_push = isinstance(node, str) and node.startswith('PUSH')

        output_string += str(node) + ' '
        if skip_newlines:
            skip_newlines -= 1
        elif is_push:
            skip_newlines = int(node[4:]) - 1
        else:
            output_string += '\n'
    return output_string


def format_output(code, return_format):
    if return_format == 'abi':
        return compiler.mk_full_signature(code)
    elif return_format == 'json':
        return json.dumps(compiler.mk_full_signature(code))
    elif return_format == 'bytecode':
        return '0x' + compiler.compile(code).hex()
    elif return_format == 'bytecode_runtime':
        return '0x' + compiler.compile(code, bytecode_runtime=True).hex()
    elif return_format == 'ir':
        return optimizer.optimize(parse_to_lll(code))
    elif return_format == 'asm':
        lll = optimizer.optimize(parse_to_lll(code))
        return get_asm(compile_lll.compile_to_assembly(lll))


if __name__ == '__main__':

    with open(args.input_file) as fh:
        code = fh.read()
        if args.show_gas_estimates:
            parser_utils.LLLnode.repr_show_gas = True

        for i in args.format:
            print(format_output(code, i))
