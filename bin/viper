#!/usr/bin/env python3.6
import sys
import argparse
import json

import viper

from viper import compiler, optimizer
from viper.parser import parse_to_lll
from viper.server import runserver

parser = argparse.ArgumentParser(description='Viper {0} programming language for Ethereum'.format(viper.__version__))
parser.add_argument('input_file', help='Viper sourcecode to compile')
parser.add_argument('-f', help='Format to print', choices=['abi', 'json', 'bytecode', 'ir'], default='bytecode', dest='format')
parser.add_argument(
    'serve',
    help='Serve compiler through HTTP JSON server',
    action="store_true",
)
parser.add_argument(
    '-b',
    help='Address to bind JSON server on, default: localhost:8000',
    default='localhost:8000',
    dest='bind_address'
)

args = parser.parse_args()

if __name__ == '__main__':

    if args.input_file == 'serve':
        if ':' in args.bind_address:
            runserver(*args.bind_address.split(':'))
        else:
            print('Provide bind address in "{address}:{port}" format')
            sys.exit()

    with open(args.input_file) as fh:
        code = fh.read()
        if args.format == 'abi':
            print(compiler.mk_full_signature(code))
        elif args.format == 'json':
            print(json.dumps(compiler.mk_full_signature(code)))
        elif args.format == 'bytecode':
            print('0x' + compiler.compile(code).hex())
        elif args.format == 'ir':
            print(optimizer.optimize(parse_to_lll(code)))
