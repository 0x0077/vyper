import ast as python_ast
from typing import (
    Any,
    Optional,
    Union,
)

from .natspec import (
    parse_natspec as parse_natspec,
)
from .utils import (
    ast_to_dict as ast_to_dict,
    parse_to_ast as parse_to_ast,
)

NODE_BASE_ATTRIBUTES: Any
NODE_SRC_ATTRIBUTES: Any
DICT_AST_SKIPLIST: Any

def get_node(
    ast_struct: Union[dict, python_ast.AST], parent: Optional[VyperNode] = ...
) -> VyperNode: ...

class VyperNode:
    full_source_code: str = ...
    def __init__(self, parent: Optional[VyperNode] = ..., **kwargs: dict) -> None: ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def description(self): ...
    @classmethod
    def get_slots(cls: Any) -> set: ...
    def to_dict(self) -> dict: ...
    def get_children(
        self,
        node_type: Union[VyperNode, tuple, None] = ...,
        filters: Optional[dict] = ...,
        reverse: bool = ...,
    ) -> list: ...
    def get_all_children(
        self,
        node_type: Union[VyperNode, tuple, None] = ...,
        filters: Optional[dict] = ...,
        include_self: bool = ...,
        reverse: bool = ...,
    ) -> list: ...
    def get(self, field_str: str) -> Any: ...

class TopLevel(VyperNode):
    doc_string: Str = ...
    body: list = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __contains__(self, obj: Any) -> bool: ...

class Module(TopLevel): ...
class FunctionDef(TopLevel): ...
class arguments(VyperNode): ...
class arg(VyperNode): ...
class Return(VyperNode): ...
class ClassDef(VyperNode): ...
class Constant(VyperNode): ...

class Num(Constant):
    @property
    def n(self): ...

class Int(Num): ...
class Decimal(Num): ...
class Hex(Num): ...
class Binary(Num): ...
class Octal(Num): ...

class Str(Constant):
    @property
    def s(self): ...

class Bytes(Constant):
    @property
    def s(self): ...

class List(VyperNode): ...

class Tuple(VyperNode):
    elts: list = ...

class Dict(VyperNode): ...
class NameConstant(Constant): ...
class Name(VyperNode): ...
class Expr(VyperNode): ...
class UnaryOp(VyperNode): ...
class UAdd(VyperNode): ...
class USub(VyperNode): ...
class Not(VyperNode): ...
class BinOp(VyperNode): ...
class Add(VyperNode): ...
class Sub(VyperNode): ...
class Mult(VyperNode): ...
class Div(VyperNode): ...
class Mod(VyperNode): ...
class Pow(VyperNode): ...
class BoolOp(VyperNode): ...
class And(VyperNode): ...
class Or(VyperNode): ...

class Compare(VyperNode):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Eq(VyperNode): ...
class NotEq(VyperNode): ...
class Lt(VyperNode): ...
class LtE(VyperNode): ...
class Gt(VyperNode): ...
class GtE(VyperNode): ...
class In(VyperNode): ...
class Call(VyperNode): ...
class keyword(VyperNode): ...
class Attribute(VyperNode): ...
class Subscript(VyperNode): ...
class Index(VyperNode): ...

class Assign(VyperNode):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class AnnAssign(VyperNode): ...
class AugAssign(VyperNode): ...
class Raise(VyperNode): ...
class Assert(VyperNode): ...
class Pass(VyperNode): ...
class Import(VyperNode): ...
class ImportFrom(VyperNode): ...
class alias(VyperNode): ...
class If(VyperNode): ...
class For(VyperNode): ...
class Break(VyperNode): ...
class Continue(VyperNode): ...
